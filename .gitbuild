#
# Originally by Reed; then added/mod by me
#
BUILD=$HOME/myGIT/app
# -----------------------------------------------------------
# gitr - making ELEASE branch - e.g. gitr 1.10.0
# -----------------------------------------------------------
function gitr() {
   if [ "$#" -ne 1 ]; then
   	  echo "You must provide a release number, eg. gitr 1.12.0"
   	  echo 
   	  exit 1
   else
      for i in nyt5-app-article nyt5-app-interactive nyt5-app-shell nyt5-app-leonhardt nyt5-app-homepage nyt5-foundation nyt5-app-blogs nyt5-app-paidpost nyt5-app-collection
	       do
	         cd $BUILD/$i
	         echo "make remote and local release branch $i <===> release/$1 ......"
	         git checkout develop;
	         git pull;
	         git checkout -b release/$1
	         git push -u origin release/$1
	         echo 
	       done
 
      for j in nyt5-foundation nyt5-shared
        do
	         cd $BUILD/$j
	         k=`echo $j |cut -d"-" -f2`
		       for m in article interactive shell blogs leonhardt homepage collection paidpost
			       do 
			           echo "make remote and local release branch bundle $k <===> release/$m/$1 ......"
			           git checkout develop
			           git pull
	 		           git checkout -b release/$m/$1
			           git push -u origin release/$m/$1
			           echo
			       done
        done
   fi
}

# ----------------------------------------------------------------------
# gitapprel - making release branch for an app from develop 
# ----------------------------------------------------------------------
function gitapprel() {
  if [ "$#" -ne 2 ]; then
     echo "This is only for apps release/hotfix branch creation "
     echo "For instance: gitapprel interactive 1.27.1 "
     echo
     exit
  elif [ "$1" != "foundation" ]; then
     cd $BUILD/nyt5-shared;
          echo "making remote and local release branch for nyt5-shared <===> release/$1/$2 ......"
          git checkout develop;
          git pull;
          git checkout -b release/$1/$2;
          git push -u origin release/$1/$2;
     
     cd $BUILD/nyt5-foundation;
          echo "making remote and local release branch for nyt5-foundation <===> release/$1/$2 ......"
          git checkout develop;
          git pull;
          git checkout -b release/$1/$2;
          git push -u origin release/$1/$2;
     
     cd $BUILD/nyt5-app-$1;
          echo "making remote and local release branch for nyt5-app-$1 <===> release/$2 ......"
          git checkout develop;
          git pull;
          git checkout -b release/$2;
        git push -u origin release/$2;
  else 
     cd $BUILD/nyt5-foundation
     git checkout develop;
     git pull >/dev/null;
     echo "make local $1 release branch =====> release/$2 ......";
     git checkout -b release/$2;
     git push -u origin release/$2;
     echo  
  fi  
}

# -----------------------------------------------------------
# gith - making HOTFIX branch  - e.g. gith article 1.10.1
# -----------------------------------------------------------
function gith() {
  if [ "$#" -ne 2 ]; then
	   echo "You must provide app's name and hotfix release number "
	   echo "For instance: gith article 1.10.1 "
	   echo
	   exit
  else
  	 cd $BUILD/nyt5-shared;
     	    echo "making remote and local HOTFIX branch for nyt5-shared <===> release/$1/$2 ......"
	        git checkout master;
  	      git pull;
  	      git checkout -b release/$1/$2;
  	      git push -u origin release/$1/$2;
	   cd $BUILD/nyt5-foundation;
  	      echo "making remote and local HOTFIX branch for nyt5-foundation <===> release/$1/$2 ......"
          git checkout master;
  	      git pull;
  	      git checkout -b release/$1/$2;
  	      git push -u origin release/$1/$2;
  	 cd $BUILD/nyt5-app-$1;
  	      echo "making remote and local HOTFIX branch for nyt5-app-$1 <===> release/$2 ......"
  	      git checkout master;
  	      git pull;
  	      git checkout -b release/$2;
	       git push -u origin release/$2;
  fi	
}

# ----------------------------------------------------------------------
# gitb - making blogs release/HOTFIX branch  - e.g. gitb  blogs 1.10.1
# ----------------------------------------------------------------------
function gitb() {
  if [ "$#" -ne 2 ]; then
	   echo "This is only for BLOGS release/hotfix branch creation "
	   echo "For instance: gitbi blogs 1.10.1 "
	   echo
	   exit
  else
  	 cd $BUILD/nyt5-shared;
     	    echo "making remote and local HOTFIX branch for nyt5-shared <===> release/$1/$2 ......"
	      git checkout master;
  	      git pull;
  	      git checkout -b release/$1/$2;
  	      git push -u origin release/$1/$2;
	   
	cd $BUILD/nyt5-foundation;
  	      echo "making remote and local HOTFIX branch for nyt5-foundation <===> release/$1/$2 ......"
              git checkout master;
  	      git pull;
  	      git checkout -b release/$1/$2;
  	      git push -u origin release/$1/$2;
  	 
	cd $BUILD/nyt5-app-$1;
  	      echo "making remote and local HOTFIX branch for nyt5-app-$1 <===> release/$2 ......"
  	      git checkout develop;
  	      git pull;
  	      git checkout -b release/$2;
	      git push -u origin release/$2;
  fi	
}
# ---------------------------------------------------------------------------------------------------------
# gitbrcd - delete branch that 3 months old and being merged into others; command run under a specific repo
# ---------------------------------------------------------------------------------------------------------
gitbrcd() {
# first clean up all stale local tracking branch
  git remote prune origin 
  
  git checkout develop
  git pull > /dev/null
  DEL_BRC=""
  for i in `git branch -r --merged|grep -v master|grep -v develop`
  #for i in `git branch -r --merged|grep release`
      do
	       AGE=$(git log -1 --pretty=format:"%ar" $i |grep months|cut -d" " -f1)
	       if [ -z "$AGE" ]; then 
            continue
         elif [ "$AGE" -ge 3 ]; then 
		        DEL_BRC="$DEL_BRC  $i"
	       else
	 	        continue
         fi
      done

  for j in $DEL_BRC
      do 
         brc=`echo $j |awk -Forigin/ '{print $2}'`
         echo $brc
         git push origin :$brc
      done
}

# ---------------------------------------------------------------------------------------------------------
# gitbdd - delete branch that 6 months old regardless its merge status under a specific repo
# ---------------------------------------------------------------------------------------------------------
gitbdd() {
# first clean up all stale local tracking branch
  git remote prune origin 
  git checkout develop
  git pull > /dev/null 
  DEL_BRC=""
  for i in `git branch -r |grep -v master|grep -v develop`
  #for i in `git branch -r --merged|grep release`
      do
         AGE=$(git log -1 --pretty=format:"%ar" $i |grep months|cut -d" " -f1)
         if [ -z "$AGE" ]; then 
            continue
         elif [ "$AGE" -ge 6 ]; then 
            DEL_BRC="$DEL_BRC  $i"
         else
            continue
         fi
      done

  for j in $DEL_BRC
      do 
         brc=`echo $j |awk -Forigin/ '{print $2}'`
         echo $brc
         git push origin :$brc
      done
}


# ---------------------------------------------------------------------------------------------------------
# gitmst - Re-Create master branch based current release branch
# ---------------------------------------------------------------------------------------------------------
gitmst() {
# you need to provide a release number eg. 1.30.0
# be careful if you already have hotfix, which app is being fixed will detemined the bundle for 
# for foundation and shared. It might be safe to re-create master manually for each hotfix repo
#
  if [ ! "$#" -eq 1 ]; then
      echo "you must provide a release number ......"
      echo "For example, gitmst 1.30.0"
      echo
      exit -1
  else
      for i in nyt5-app-article nyt5-app-interactive nyt5-app-shell nyt5-app-leonhardt nyt5-app-homepage nyt5-app-paidpost nyt5-foundation nyt5-app-collection
      do
        cd $BUILD/$i;
        git pull > /dev/null;
        git checkout -B release/$1 origin/release/$1;
        echo "Re-Create UpStream(github) master branch for $i from release/$1 ......";
        git push origin release/$1:master  --force;
        echo
      done
      
      for i in nyt5-shared
      do
      cd $BUILD/$i
        git pull > /dev/null ;
        git checkout -B release/article/$1  origin/release/article/$1;
        echo "Re-Create UpStream(github) master branch for $i from release/article/$1  ..."
        git push origin release/article/$1:master --force;
        echo
      done
  fi
  echo "Now we go to each repo, DELETE old local master, pull down and re-create it ... "
      for i in nyt5-app-article nyt5-app-interactive nyt5-app-shell nyt5-app-leonhardt nyt5-app-homepage nyt5-app-collection nyt5-app-paidpost nyt5-foundation nyt5-shared 
        do
          cd $BUILD/$i;
          git branch -D master;
          git pull > /dev/null;
          echo $i
          git checkout -B master origin/master;
          echo 
        done
}


